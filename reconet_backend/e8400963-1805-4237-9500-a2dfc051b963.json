{"hosts": ["facebook.com"], "alerts": [{"sourceid": "3", "other": "", "method": "GET", "evidence": "", "pluginId": "10038", "cweid": "693", "confidence": "High", "wascid": "15", "description": "The response contained a Content-Security-Policy-Report-Only header, this may indicate a work-in-progress implementation, or an oversight in promoting pre-Prod to Prod, etc.\n\nContent Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks, including Cross Site Scripting (XSS) and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "6", "inputVector": "", "url": "https://facebook.com/robots.txt", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "https://www.w3.org/TR/CSP2/\nhttps://w3c.github.io/webappsec-csp/\nhttp://caniuse.com/#feat=contentsecuritypolicy\nhttp://content-security-policy.com/", "solution": "Ensure that your web server, application server, load balancer, etc. is configured to set the Content-Security-Policy header, to achieve optimal browser support: \"Content-Security-Policy\" for Chrome 25+, Firefox 23+ and Safari 7+, \"X-Content-Security-Policy\" for Firefox 4.0+ and Internet Explorer 10+, and \"X-WebKit-CSP\" for Chrome 14+ and Safari 6+.", "alert": "Content Security Policy (CSP) Report-Only Header Found", "param": "", "attack": "", "name": "Content Security Policy (CSP) Report-Only Header Found", "risk": "Informational", "id": "0", "alertRef": "10038"}, {"sourceid": "3", "other": "The following directives either allow wildcard sources (or ancestors), are not defined, or are overly broadly defined: \nframe-ancestors, form-action\n\nThe directive(s): frame-ancestors, form-action are among the directives that do not fallback to default-src, missing/excluding them is the same as allowing anything.", "method": "GET", "evidence": "default-src data: blob: 'self' https://*.fbsbx.com 'unsafe-inline' *.facebook.com 'unsafe-eval' *.fbcdn.net;script-src *.facebook.com *.fbcdn.net *.facebook.net *.google-analytics.com *.google.com 127.0.0.1:* 'unsafe-inline' 'unsafe-eval' blob: data: 'self' connect.facebook.net;style-src fonts.googleapis.com *.fbcdn.net data: *.facebook.com 'unsafe-inline';connect-src *.facebook.com facebook.com *.fbcdn.net *.facebook.net wss://*.facebook.com:* wss://*.whatsapp.com:* wss://*.fbcdn.net attachment.fbsbx.com ws://localhost:* blob: *.cdninstagram.com 'self' http://localhost:3103 wss://gateway.facebook.com wss://edge-chat.facebook.com wss://snaptu-d.facebook.com wss://kaios-d.facebook.com/ v.whatsapp.net *.fbsbx.com *.fb.com;font-src data: *.gstatic.com *.facebook.com *.fbcdn.net *.fbsbx.com;img-src *.fbcdn.net *.facebook.com data: https://*.fbsbx.com *.tenor.co media.tenor.com facebook.com *.cdninstagram.com fbsbx.com fbcdn.net *.giphy.com connect.facebook.net *.carriersignal.info blob: android-webview-video-poster: googleads.g.doubleclick.net www.googleadservices.com *.whatsapp.net *.fb.com *.oculuscdn.com;media-src *.cdninstagram.com blob: *.fbcdn.net *.fbsbx.com www.facebook.com *.facebook.com https://*.giphy.com data:;frame-src *.doubleclick.net *.google.com *.facebook.com www.googleadservices.com *.fbsbx.com fbsbx.com data: www.instagram.com *.fbcdn.net https://paywithmybank.com https://sandbox.paywithmybank.com;worker-src blob: *.facebook.com data:;block-all-mixed-content;upgrade-insecure-requests;", "pluginId": "10055", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "6", "inputVector": "", "url": "https://facebook.com/robots.txt", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources", "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.", "alert": "CSP: Wildcard Directive", "param": "content-security-policy", "attack": "", "name": "CSP: Wildcard Directive", "risk": "Medium", "id": "1", "alertRef": "10055-4"}, {"sourceid": "3", "other": "script-src includes unsafe-inline.", "method": "GET", "evidence": "default-src data: blob: 'self' https://*.fbsbx.com 'unsafe-inline' *.facebook.com 'unsafe-eval' *.fbcdn.net;script-src *.facebook.com *.fbcdn.net *.facebook.net *.google-analytics.com *.google.com 127.0.0.1:* 'unsafe-inline' 'unsafe-eval' blob: data: 'self' connect.facebook.net;style-src fonts.googleapis.com *.fbcdn.net data: *.facebook.com 'unsafe-inline';connect-src *.facebook.com facebook.com *.fbcdn.net *.facebook.net wss://*.facebook.com:* wss://*.whatsapp.com:* wss://*.fbcdn.net attachment.fbsbx.com ws://localhost:* blob: *.cdninstagram.com 'self' http://localhost:3103 wss://gateway.facebook.com wss://edge-chat.facebook.com wss://snaptu-d.facebook.com wss://kaios-d.facebook.com/ v.whatsapp.net *.fbsbx.com *.fb.com;font-src data: *.gstatic.com *.facebook.com *.fbcdn.net *.fbsbx.com;img-src *.fbcdn.net *.facebook.com data: https://*.fbsbx.com *.tenor.co media.tenor.com facebook.com *.cdninstagram.com fbsbx.com fbcdn.net *.giphy.com connect.facebook.net *.carriersignal.info blob: android-webview-video-poster: googleads.g.doubleclick.net www.googleadservices.com *.whatsapp.net *.fb.com *.oculuscdn.com;media-src *.cdninstagram.com blob: *.fbcdn.net *.fbsbx.com www.facebook.com *.facebook.com https://*.giphy.com data:;frame-src *.doubleclick.net *.google.com *.facebook.com www.googleadservices.com *.fbsbx.com fbsbx.com data: www.instagram.com *.fbcdn.net https://paywithmybank.com https://sandbox.paywithmybank.com;worker-src blob: *.facebook.com data:;block-all-mixed-content;upgrade-insecure-requests;", "pluginId": "10055", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "6", "inputVector": "", "url": "https://facebook.com/robots.txt", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources", "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.", "alert": "CSP: script-src unsafe-inline", "param": "content-security-policy", "attack": "", "name": "CSP: script-src unsafe-inline", "risk": "Medium", "id": "2", "alertRef": "10055-5"}, {"sourceid": "3", "other": "style-src includes unsafe-inline.", "method": "GET", "evidence": "default-src data: blob: 'self' https://*.fbsbx.com 'unsafe-inline' *.facebook.com 'unsafe-eval' *.fbcdn.net;script-src *.facebook.com *.fbcdn.net *.facebook.net *.google-analytics.com *.google.com 127.0.0.1:* 'unsafe-inline' 'unsafe-eval' blob: data: 'self' connect.facebook.net;style-src fonts.googleapis.com *.fbcdn.net data: *.facebook.com 'unsafe-inline';connect-src *.facebook.com facebook.com *.fbcdn.net *.facebook.net wss://*.facebook.com:* wss://*.whatsapp.com:* wss://*.fbcdn.net attachment.fbsbx.com ws://localhost:* blob: *.cdninstagram.com 'self' http://localhost:3103 wss://gateway.facebook.com wss://edge-chat.facebook.com wss://snaptu-d.facebook.com wss://kaios-d.facebook.com/ v.whatsapp.net *.fbsbx.com *.fb.com;font-src data: *.gstatic.com *.facebook.com *.fbcdn.net *.fbsbx.com;img-src *.fbcdn.net *.facebook.com data: https://*.fbsbx.com *.tenor.co media.tenor.com facebook.com *.cdninstagram.com fbsbx.com fbcdn.net *.giphy.com connect.facebook.net *.carriersignal.info blob: android-webview-video-poster: googleads.g.doubleclick.net www.googleadservices.com *.whatsapp.net *.fb.com *.oculuscdn.com;media-src *.cdninstagram.com blob: *.fbcdn.net *.fbsbx.com www.facebook.com *.facebook.com https://*.giphy.com data:;frame-src *.doubleclick.net *.google.com *.facebook.com www.googleadservices.com *.fbsbx.com fbsbx.com data: www.instagram.com *.fbcdn.net https://paywithmybank.com https://sandbox.paywithmybank.com;worker-src blob: *.facebook.com data:;block-all-mixed-content;upgrade-insecure-requests;", "pluginId": "10055", "cweid": "693", "confidence": "High", "wascid": "15", "description": "Content Security Policy (CSP) is an added layer of security that helps to detect and mitigate certain types of attacks. Including (but not limited to) Cross Site Scripting (XSS), and data injection attacks. These attacks are used for everything from data theft to site defacement or distribution of malware. CSP provides a set of standard HTTP headers that allow website owners to declare approved sources of content that browsers should be allowed to load on that page \u2014 covered types are JavaScript, CSS, HTML frames, fonts, images and embeddable objects such as Java applets, ActiveX, audio and video files.", "messageId": "6", "inputVector": "", "url": "https://facebook.com/robots.txt", "tags": {"OWASP_2021_A05": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/", "OWASP_2017_A06": "https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration.html"}, "reference": "http://www.w3.org/TR/CSP2/\nhttp://www.w3.org/TR/CSP/\nhttp://caniuse.com/#search=content+security+policy\nhttp://content-security-policy.com/\nhttps://github.com/shapesecurity/salvation\nhttps://developers.google.com/web/fundamentals/security/csp#policy_applies_to_a_wide_variety_of_resources", "solution": "Ensure that your web server, application server, load balancer, etc. is properly configured to set the Content-Security-Policy header.", "alert": "CSP: style-src unsafe-inline", "param": "content-security-policy", "attack": "", "name": "CSP: style-src unsafe-inline", "risk": "Medium", "id": "3", "alertRef": "10055-6"}, {"sourceid": "3", "other": "", "method": "GET", "evidence": "<script src=\"https://static.xx.fbcdn.net/rsrc.php/v3/yW/r/ScVP74LB7Aq.js?_nc_x=Ij3Wp8lg5Kz\" data-bootloader-hash=\"XNaMn2+\" crossorigin=\"anonymous\" nonce=\"3c1uKgME\"></script>", "pluginId": "10017", "cweid": "829", "confidence": "Medium", "wascid": "15", "description": "The page includes one or more script files from a third-party domain.", "messageId": "6", "inputVector": "", "url": "https://facebook.com/robots.txt", "tags": {"OWASP_2021_A08": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/"}, "reference": "", "solution": "Ensure JavaScript source files are loaded from only trusted sources, and the sources can't be controlled by end users of the application.", "alert": "Cross-Domain JavaScript Source File Inclusion", "param": "https://static.xx.fbcdn.net/rsrc.php/v3/yW/r/ScVP74LB7Aq.js?_nc_x=Ij3Wp8lg5Kz", "attack": "", "name": "Cross-Domain JavaScript Source File Inclusion", "risk": "Low", "id": "4", "alertRef": "10017"}, {"sourceid": "3", "other": "No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF, _token, _csrf_token] was found in the following HTML form: [Form 1: \"ab_test_data\" \"email\" \"guid\" \"jazoest\" \"lgnjs\" \"lgnrnd\" \"locale\" \"login_source\" \"lsd\" \"next\" \"pass\" \"prefill_contact_point\" \"prefill_source\" \"prefill_type\" \"u_0_0_oo\" \"u_0_1_cB\" \"u_0_2_xa\" ].", "method": "GET", "evidence": "<form id=\"login_form\" action=\"https://www.facebook.com/login/device-based/regular/login/?login_attempt=1&amp;lwv=110\" method=\"post\" novalidate=\"1\" onsubmit=\"\">", "pluginId": "10202", "cweid": "352", "confidence": "Low", "wascid": "9", "description": "No Anti-CSRF tokens were found in a HTML submission form.\nA cross-site request forgery is an attack that involves forcing a victim to send an HTTP request to a target destination without their knowledge or intent in order to perform an action as the victim. The underlying cause is application functionality using predictable URL/form actions in a repeatable way. The nature of the attack is that CSRF exploits the trust that a web site has for a user. By contrast, cross-site scripting (XSS) exploits the trust that a user has for a web site. Like XSS, CSRF attacks are not necessarily cross-site, but they can be. Cross-site request forgery is also known as CSRF, XSRF, one-click attack, session riding, confused deputy, and sea surf.\n\nCSRF attacks are effective in a number of situations, including:\n    * The victim has an active session on the target site.\n    * The victim is authenticated via HTTP auth on the target site.\n    * The victim is on the same local network as the target site.\n\nCSRF has primarily been used to perform an action against a target site using the victim's privileges, but recent techniques have been discovered to disclose information by gaining access to the response. The risk of information disclosure is dramatically increased when the target site is vulnerable to XSS, because XSS can be used as a platform for CSRF, allowing the attack to operate within the bounds of the same-origin policy.", "messageId": "6", "inputVector": "", "url": "https://facebook.com/robots.txt", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "WSTG-v42-SESS-05": "https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/06-Session_Management_Testing/05-Testing_for_Cross_Site_Request_Forgery", "OWASP_2017_A05": "https://owasp.org/www-project-top-ten/2017/A5_2017-Broken_Access_Control.html"}, "reference": "http://projects.webappsec.org/Cross-Site-Request-Forgery\nhttp://cwe.mitre.org/data/definitions/352.html", "solution": "Phase: Architecture and Design\nUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.\nFor example, use anti-CSRF packages such as the OWASP CSRFGuard.\n\nPhase: Implementation\nEnsure that your application is free of cross-site scripting issues, because most CSRF defenses can be bypassed using attacker-controlled script.\n\nPhase: Architecture and Design\nGenerate a unique nonce for each form, place the nonce into the form, and verify the nonce upon receipt of the form. Be sure that the nonce is not predictable (CWE-330).\nNote that this can be bypassed using XSS.\n\nIdentify especially dangerous operations. When the user performs a dangerous operation, send a separate confirmation request to ensure that the user intended to perform that operation.\nNote that this can be bypassed using XSS.\n\nUse the ESAPI Session Management control.\nThis control includes a component for CSRF.\n\nDo not use the GET method for any request that triggers a state change.\n\nPhase: Implementation\nCheck the HTTP Referer header to see if the request originated from an expected page. This could break legitimate functionality, because users or proxies may have disabled sending the Referer for privacy reasons.", "alert": "Absence of Anti-CSRF Tokens", "param": "", "attack": "", "name": "Absence of Anti-CSRF Tokens", "risk": "Medium", "id": "5", "alertRef": "10202"}, {"sourceid": "3", "other": "Links have been found that do not have traditional href attributes, which is an indication that this is a modern web application.", "method": "GET", "evidence": "<a role=\"button\" class=\"_42ft _4jy0 _517i _517h _51sy\" rel=\"dialog\" ajaxify=\"/settings/language/language/?uri=https%3A%2F%2Ffacebook.com%2Frobots.txt&amp;source=www_list_selector_more\" href=\"#\" title=\"&#x914;&#x930; &#x92d;&#x93e;&#x937;&#x93e;&#x90f;&#x901; &#x926;&#x93f;&#x916;&#x93e;&#x90f;&#x901;\"><i class=\"img sp_AAps2FZnI6b sx_6af3c2\"></i></a>", "pluginId": "10109", "cweid": "-1", "confidence": "Medium", "wascid": "-1", "description": "The application appears to be a modern web application. If you need to explore it automatically then the Ajax Spider may well be more effective than the standard one.", "messageId": "6", "inputVector": "", "url": "https://facebook.com/robots.txt", "tags": {}, "reference": "", "solution": "This is an informational alert and so no changes are required.", "alert": "Modern Web Application", "param": "", "attack": "", "name": "Modern Web Application", "risk": "Informational", "id": "6", "alertRef": "10109"}, {"sourceid": "3", "other": "1671637573, which evaluates to: 2022-12-21 21:16:13", "method": "GET", "evidence": "1671637573", "pluginId": "10096", "cweid": "200", "confidence": "Low", "wascid": "13", "description": "A timestamp was disclosed by the application/web server - Unix", "messageId": "6", "inputVector": "", "url": "https://facebook.com/robots.txt", "tags": {"OWASP_2021_A01": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/", "OWASP_2017_A03": "https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure.html"}, "reference": "http://projects.webappsec.org/w/page/13246936/Information%20Leakage", "solution": "Manually confirm that the timestamp data is not sensitive, and that the data cannot be aggregated to disclose exploitable patterns.", "alert": "Timestamp Disclosure - Unix", "param": "", "attack": "", "name": "Timestamp Disclosure - Unix", "risk": "Low", "id": "7", "alertRef": "10096"}]}